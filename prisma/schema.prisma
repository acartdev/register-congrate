// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id          Int         @unique    @id @default(autoincrement())
  userID      String      @unique
  uuid        String?     @unique @default(uuid()) @db.Uuid
  prefix      NamePrefix
  firstName   String
  lastName    String
  phone       String? 
  email       String      @unique
  deptID      Int
  role        UserRole?
  permit      Permission?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  password    String
  isVerified  Boolean     @default(false)

  activities   Activity[]
  registerActivities RegisterActivity[]
  department    Department? @relation(fields: [deptID], references: [id])

  @@index([uuid,userID,id,email])
}

enum NamePrefix {
  นาย
  นางสาว
}

enum UserRole {
  ADMIN
  STUDENT
  TEACHER
}

enum Permission {
  ADMIN
  STAFF_TEACHER
  STAFF_STUDENT
  VIEW
}


model Activity {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  attachment  String
  user_id  Int

  users       Users    @relation(fields: [user_id], references: [id])
  registerActivities RegisterActivity[]

  @@index([id,name,user_id])
}

model RegisterActivity {
  id          Int      @id @default(autoincrement())
  activity_id Int
  user_id     Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  users       Users    @relation(fields: [user_id], references: [id])
  activity    Activity @relation(fields: [activity_id], references: [id])

  @@index([id, activity_id, user_id])
}

model Department {
  id          Int      @id @default(autoincrement())
  name        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt @default(now())
  users       Users[]
  logs        Logs[]

  @@index([id,name])
}
enum CURD {
  CREATE
  UPDATE
  DELETE
}
model Logs {
  id          Int      @id @default(autoincrement())
  type        CURD
  message     String
  deptID      Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt 

  department  Department @relation(fields: [deptID], references: [id])

  @@index([id, deptID])
}